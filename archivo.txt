Problema 1 

var calcularCreditos = function(coherencias) {
    const n = coherencias.length;
    const creditos = new Array(n).fill(1);

    // Izquierda a derecha
    for (let i = 1; i < n; i++) {
        if (coherencias[i] > coherencias[i - 1]) {
            creditos[i] = creditos[i - 1] + 1;
        }
    }

    // Derecha a izquierda
    for (let i = n - 2; i >= 0; i--) {
        if (coherencias[i] > coherencias[i + 1]) {
            creditos[i] = Math.max(creditos[i], creditos[i + 1] + 1);
        }
    }

    return creditos.reduce((a, b) => a + b, 0);
};


Problema 2 

var segmentarTelemetria = function(telemetria, firmasCuanticas) {
    const diccionario = new Set(firmasCuanticas);
    const memo = new Map();

    function dfs(s) {
        if (memo.has(s)) return memo.get(s);
        const resultado = [];

        if (diccionario.has(s)) resultado.push(s);

        for (let i = 1; i < s.length; i++) {
            const prefijo = s.slice(0, i);
            const sufijo = s.slice(i);

            if (diccionario.has(prefijo)) {
                const segmentaciones = dfs(sufijo);
                for (const seg of segmentaciones) {
                    resultado.push(prefijo + ' ' + seg);
                }
            }
        }

        memo.set(s, resultado);
        return resultado;
    }

    return dfs(telemetria);
};


Problema 3

var encontrarMinimo = function(valores) {
    let izquierda = 0;
    let derecha = valores.length - 1;

    while (izquierda < derecha) {
        const medio = Math.floor((izquierda + derecha) / 2);

        if (valores[medio] > valores[derecha]) {
            izquierda = medio + 1;
        } else if (valores[medio] < valores[derecha]) {
            derecha = medio;
        } else {
            // valores[medio] === valores[derecha], reducir rango
            derecha--;
        }
    }

    return valores[izquierda];
};
